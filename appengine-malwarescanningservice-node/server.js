/*
* Copyright 2019 Google LLC

* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at

*     https://www.apache.org/licenses/LICENSE-2.0

* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

const clamd = require('clamdjs');
const express = require('express');
const uuid = require('uuid');
const fs = require('fs');
const bodyParser = require('body-parser');
const { Client } = require('pg');
const { Storage } = require('@google-cloud/storage');


const app = express();
const PORT = process.env.PORT || 8080;
const scanner = clamd.createScanner('127.0.0.1', 3310);
const CLOUD_STORAGE_BUCKET = 'puzzle-io-development-unscanned';
const CLEAN_BUCKET = 'puzzle-io-development-scanned';
const QUARANTINED_BUCKET = 'puzzle-io-development-quarantined';

app.use(bodyParser.json());

// Creates a client
const storage = new Storage();

// Get the bucket which is declared as an environment variable
let srcbucket = storage.bucket(CLOUD_STORAGE_BUCKET);

const run = () => app.listen(PORT, () => {
  console.log(`Server started on port ${PORT}`);
})

/**
 * Route that is invoked by a Cloud Function when a malware scan is requested
 * for a document uploaded to GCS.
 *
 * @param {object} req The request payload
 * @param {object} res The HTTP response object
 */
app.post('/scan', async (req, res) => {
  const remoteName = req.body.filename; // FIXME
  // const gatewayHost = req.body.gatewayHost;
  const pieces = remoteName.split('.');
  const last = pieces[pieces.length-1];
  const ext = last ? '.' + last : ''; // in case the scanner uses MIME types // how to setup .env?

  console.log(`SERVER ENV: ${process.env}`);
  console.log(`SERVER GATEWAY HOST: http://localhost:3000`);  // set gateway host as env var?
  console.log(`SERVER BUCKET NAME: ${JSON.stringify(CLOUD_STORAGE_BUCKET)}`);
  console.log(`SERVER REQUEST: ${JSON.stringify(req.body)}`);
  console.log(`SERVER FILENAME ${JSON.stringify(remoteName)}`);

  const destination = `fakename-${uuid.v4()}` + ext;

  try {
    const options = {
      destination // fakename.txt
    };

    //Downloads the file to docker img

    console.log("LET THE SCANNING COMMENSE.@@@@@@@@@@@@@@@@@@@@@@@@@")

    await storage
      .bucket(CLOUD_STORAGE_BUCKET)
      .file(remoteName)
      .download(options);
    const result = await scanner.scanFile(`${destination}`);
    if (result.indexOf('OK') > -1) {
      // Move document to the bucket that holds clean documents
      console.log("Document was sucessfully scanned");
      await moveProcessedFile(remoteName, true);

      // Log scan outcome for document
      console.log(`Scan status for ${remoteName}: CLEAN`)

      // Respond to API client
      res.json({status: 'clean'});
    } else {
      // Move document to the bucket that holds infected documents
      await moveProcessedFile(remoteName, false);

      // Log scan outcome for document
      console.log(`Scan status for ${remoteName}: INFECTED`)

      // Respond to API client
      res.json({
        message: result,
        status: 'infected'
      });
    }
  } catch(e) {
    console.error(`Error processing the file ${destination} is the path ${req.path}.`, e)
    res.status(500).json({
      message: `${e.toString()}`,
  //    output: `${stdout}`,  
      status: 'error'
    });
  } finally {
    // Delete file from the local directory on the container
    deleteLocalCopy(`${destination}`, destination);
  }
})

const deleteLocalCopy = (loc, filename) => {
  fs.unlink(loc, (err) => {
    if (err) {
      console.error(`Error deleting file ${filename}`);
    } else {
      console.log(`File ${filename} was deleted successfully`);
    }
  })
}

const moveProcessedFile = async (filename, isClean) => {
  const srcfile = srcbucket.file(filename);
  const destinationBucketName = isClean ? `gs://${CLEAN_BUCKET}` : `gs://${QUARANTINED_BUCKET}`;
  const destinationBucket = storage.bucket(destinationBucketName);
  await srcfile.move(destinationBucket);
}

const launchVirusScanner = async () => {
  run();
  // if (await isVirusScannerEnabled() == true) {
  //   run();
  // } else {
  //   console.log("Did not launch because the scanner is not enabled.");
  // }
}

// disableVirusScanner();
// enableVirusScanner();
// createScannerFlagIfDoesntExist();
launchVirusScanner();